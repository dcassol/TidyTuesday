install.packages("curl")
install.packages("rio")
install.packages("‘FactoMineR’")
install.packages("‘FactoMineR")
install.packages("FactoMineR")
setwd("~/")
library(FactoMineR) #PCA function
##dados do marcel
germ <- paste0 ("Planilha para PCA - Todos os dados-.csv")
germ1 <- read.delim(germ, sep=",")
germ <- read.delim(germ, sep=",")
row.names(germ) <- germ[,1]
germ
alldata.PCA <- PCA(alldata[,1:9], graph =T)
alldata.PCA <- PCA(germ, graph =T)
germ[1:4,4:12]
dim(germ)
germ[1:4,4:20]
alldata.PCA <- PCA(germ[,4:20], graph =T)
germ$Espécie
germ$Fator.1
germ$Fator.2
##dados do marcel
all.data <- paste0 ("Planilha para PCA - Todos os dados-.csv")
all.data <- read.delim(all.data, sep=",")
row.names(all.data) <- all.data[,1]
##dados do marcel
all.data <- paste0 ("Planilha para PCA - Todos os dados-.csv")
all.data <- read.delim(all.data, sep=",")
row.names(all.data) <- all.data[,1]
all.data
alldata.PCA <- PCA(all.data[,4:20], graph =T)
all.data$Espécie
alldata.sp <- fviz_pca_ind(alldata.PCA, geom = "point", col.ind = all.data$Espécie)
library("factoextra") #fviz_pca_var
install.packages("factoextra") #fviz_pca_var
BiocManager::install("Rcwl")
BiocManager::install("Rcwl")
BiocManager::install(hubentu/"Rcwl")
BiocManager::install("hubentu/Rcwl")
BiocManager::install()
# for(i in seq_along(pkg)){
#   if(!requireNamespace(pkg[i], quietly=TRUE))
#     install.packages(pkg[i])
# }
suppressPackageStartupMessages({
library(tidyverse)
library(paletteer)
library(grDevices)
library(gganimate)
library(magrittr)
library(dplyr)
library(gifski)
})
attendance <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/attendance.csv')
attendance <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/attendance.csv')
standings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/standings.csv')
games <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/games.csv')
attendance
unique(attendance$team)
unique(attendance$year)
any(is.na(attendance$weekly_attendance))
attendance
colnames(attendance)
unique(attendance$team)
unique(attendance$year)
any(is.na(attendance$weekly_attendance))
Code based on [link](https://duvancho321.github.io/Tidyuesday/Folder/2020/2020-02-04/)
```{r, gganimate}
top <- attendance %>%
filter(!is.na(weekly_attendance)) %>%
group_by(team_name) %>%
summarise(n = sum(weekly_attendance)) %>%
top_n(4)
df <- attendance %>%
#filter(!is.na(weekly_attendance)) %>%
filter(team_name %in% top$team_name)
g <-   ggplot(df,aes(x=year,y = as.factor(week))) +
scale_x_continuous(position = "top")+
scale_fill_paletteer_c("grDevices::Greens",direction = -1)+
geom_tile(data = subset(df, !is.na(weekly_attendance)), aes(fill = weekly_attendance),  color="grey12")+
geom_tile(data = subset(df, is.na(weekly_attendance)), fill="grey20", color="grey12")+
facet_wrap(~team_name,nrow = 2,strip.position = "bottom",scales = "free")+
labs(title = "Weekly Attendance",
subtitle = "Top 4",
x = "Year",
y = "Week",
fill = "Rate",
caption = "Data: 'NFL Attendance'")+
theme(panel.grid = element_blank(),
axis.ticks.y = element_line(color = "grey76"),
legend.position = "none",
legend.background = element_rect(fill = "grey10"),
legend.key.size = unit(1.5,"cm"),
panel.background = element_rect(fill="grey10",color = "grey10"),
plot.background = element_rect(fill="grey10"),
strip.background = element_rect(fil="grey20"),
panel.spacing = unit(2, "lines"),
plot.title = element_text(size=28, color="grey76",hjust = .5),
plot.subtitle  = element_text(size=20, color="grey76", hjust = .5),
plot.caption = element_text(size = 14,color = "grey76", hjust = .99),
axis.text = element_text(family = "Roboto Mono",
size = 14,
colour = "grey76"),
strip.text.x =element_text(family = "Roboto Mono",
size = 14,
colour = "grey76"),
axis.title =  element_text(family = "Roboto Mono",
size = 20,
colour = "white"),
legend.text = element_text(family = "Roboto Mono",
size = 10,
colour = "grey76"),
legend.title = element_text(family = "Roboto Mono",
size = 14,
colour = "grey76"))
g
g1 <- g + transition_time(year)+
shadow_mark() + enter_recolor()
animate(g1, renderer = gifski_renderer(), height = 800, width = 1000, fps = 10)
animate(g1, renderer = gifski_renderer(), height = 800, width = 1000, fps = 10)
anim_save("nations.gif")
getwd()
dir()
anim_save("nations.gif")
anim_save("TidyTuesday/nations.gif")
setwd("TidyTuesday/R_code/")
install.packages("extrafont")
library(tidyverse)
attendance <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/attendance.csv')
standings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/standings.csv')
NFL_teams <- dplyr::left_join(x = attendance, y = standings, by = c("year", "team_name", "team"))
plot_data <- NFL_teams %>%
filter(grepl(pattern = 'Chargers|Rams', x = team_name)) %>%
filter(year > 2010)
avg_att <- plot_data %>%
group_by(team, team_name, year) %>%
summarise(avg_weekly_atd =  round(x = mean(x = weekly_attendance, na.rm = TRUE), digits = 0)) %>%
ungroup()
att_th <- 9e4
top_att <- plot_data %>%
filter(weekly_attendance > att_th) %>%
select(weekly_attendance)
top_att_games <- data.frame(team = character(), team_name = character(), year = double(), week = double(), weekly_attendance = double())
for (i in seq(from = 1, to = nrow(top_att), by = 1)){
top_att_games <- rbind(top_att_games, data.frame(NFL_teams %>%
filter(weekly_attendance == top_att$weekly_attendance[i]) %>%
select(team, team_name, year, week, weekly_attendance) %>%
arrange(desc(weekly_attendance)) %>%
mutate(opp_team = case_when(weekly_attendance == lag(x = weekly_attendance, n = 1) ~ lag(x = team, n = 1),
weekly_attendance == lead(x = weekly_attendance, n = 1) ~ lead(x = team, n = 1))) %>%
mutate(opp_team_name = case_when(weekly_attendance == lag(x = weekly_attendance, n = 1) ~ lag(x = team_name, n = 1),
weekly_attendance == lead(x = weekly_attendance, n = 1) ~ lead(x = team_name, n = 1))) %>%
filter(grepl(pattern = 'Chargers|Rams', x = team_name))))
}
library(gganimate); library(ggrepel); library(extrafont)
plot <- ggplot(data = plot_data)+
geom_point(mapping = aes(x = week, y = weekly_attendance, col = team), shape = 1)+
geom_hline(mapping = aes(yintercept = avg_weekly_atd, col = team), linetype = 2, data = avg_att)+
geom_text_repel(mapping = aes(x = 10, y = 3.5e4, label = paste('Average Weekly Attendance: ', avg_weekly_atd)),
family = 'Bahnschrift', size = 3, data = avg_att, seed = 1008, segment.alpha = 0.4)+
geom_text_repel(mapping = aes(x = week, y = weekly_attendance, label = paste('vs: ', opp_team_name)),
family = 'Bahnschrift', size = 2.75, data = top_att_games, seed = 1008, segment.alpha = 0.4)+
facet_wrap(facets = ~ team_name)+
ggthemes::theme_tufte(base_size = 12, base_family = 'Bahnschrift')+
labs(x = 'Game Week', y = 'Attendance', col = 'Location: ',
title = "Weekly NFL Attendances for Chargers and Rams Games, Year: {closest_state}",
subtitle = 'Moving to LA was Deterimental for Attendances at Chargers Games \n and Beneficial for Attendances at Rams Games (Considering 2011 - 2019)',
caption = 'Tidy Tuesday 2020, Week 6  |  Data from Pro Football Reference  |  @d73mwf')+
theme(legend.position = 'top')+
transition_states(states = year, transition_length = 1, state_length = 5, wrap = FALSE)+
enter_fade() + exit_fade()
animate(plot = plot, fps = 20, duration = 10, end_pause = 3, width = 750, height = 500)
plot
top_att
top <- attendance %>%
filter(!is.na(weekly_attendance)) %>%
group_by(team_name) %>%
summarise(n = sum(weekly_attendance)) %>%
top_n(4)
top
att_th
combine <- attendance %>% left_join(standings, by = c("team", "team_name", "year"))
plot_data <- combine %>%
filter(grepl(pattern = 'Chargers|Rams', x = team_name)) %>%
filter(year > 2010)
avg_att <- plot_data %>%
group_by(team, team_name, year) %>%
summarise(avg_weekly_atd =  round(x = mean(x = weekly_attendance, na.rm = TRUE), digits = 0)) %>%
ungroup()
att_th <- 9e4
top_att <- plot_data %>%
filter(weekly_attendance > att_th) %>%
select(weekly_attendance)
top_att_games <- data.frame(team = character(), team_name = character(), year = double(), week = double(), weekly_attendance = double())
for (i in seq(from = 1, to = nrow(top_att), by = 1)){
top_att_games <- rbind(top_att_games, data.frame(combine %>%
filter(weekly_attendance == top_att$weekly_attendance[i]) %>%
select(team, team_name, year, week, weekly_attendance) %>%
arrange(desc(weekly_attendance)) %>%
mutate(opp_team = case_when(weekly_attendance == lag(x = weekly_attendance, n = 1) ~ lag(x = team, n = 1),
weekly_attendance == lead(x = weekly_attendance, n = 1) ~ lead(x = team, n = 1))) %>%
mutate(opp_team_name = case_when(weekly_attendance == lag(x = weekly_attendance, n = 1) ~ lag(x = team_name, n = 1),
weekly_attendance == lead(x = weekly_attendance, n = 1) ~ lead(x = team_name, n = 1))) %>%
filter(grepl(pattern = 'Chargers|Rams', x = team_name))))
}
plot <- ggplot(data = plot_data)+
geom_point(mapping = aes(x = week, y = weekly_attendance, col = team), shape = 1)+
geom_hline(mapping = aes(yintercept = avg_weekly_atd, col = team), linetype = 2, data = avg_att)+
geom_text_repel(mapping = aes(x = 10, y = 3.5e4, label = paste('Average Weekly Attendance: ', avg_weekly_atd)),
family = 'Bahnschrift', size = 3, data = avg_att, seed = 1008, segment.alpha = 0.4)+
geom_text_repel(mapping = aes(x = week, y = weekly_attendance, label = paste('vs: ', opp_team_name)),
family = 'Bahnschrift', size = 2.75, data = top_att_games, seed = 1008, segment.alpha = 0.4)+
facet_wrap(facets = ~ team_name)+
ggthemes::theme_tufte(base_size = 12, base_family = 'Bahnschrift')+
labs(x = 'Game Week', y = 'Attendance', col = 'Location: ',
title = "Weekly NFL Attendances for Chargers and Rams Games, Year: {closest_state}",
subtitle = 'Moving to LA was Deterimental for Attendances at Chargers Games \n and Beneficial for Attendances at Rams Games (Considering 2011 - 2019)',
caption = 'Tidy Tuesday 2020, Week 6  |  Data from Pro Football Reference  |  @d73mwf')+
theme(legend.position = 'top')+
transition_states(states = year, transition_length = 1, state_length = 5, wrap = FALSE)+
enter_fade() + exit_fade()
animate(plot = plot, fps = 20, duration = 10, end_pause = 3, width = 750, height = 500)
anim_save(animation = last_animation(), filename = 'g2_plot.gif')
